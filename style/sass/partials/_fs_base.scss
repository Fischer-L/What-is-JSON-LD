@import "reset";
@import "compass";

// The same as unsemantic-grid-responsive-no-ie7.scss
$unsemantic-ie7-support: false;
@import "unsemantic-grid-responsive";

$font-color : #f0f0f0;
$font-family : sans-serif;
$font-size-m : 1rem;
$margin-base-unit : 2px;

// Func:
//		Get font sizes of h tags
// Arg:
//		<NUM> $h = 1 ~ 6 for h1 ~ h6
// Return:
//		<STR> font-size in rem
@function fs-get-h-tag-font-size($h) {
	
	$weight : 1;
	
	@if $h == 1 {
	
		$weight : 4;
	
	} @else if $h == 2 {
	
		$weight : 3;
	
	} @else if $h == 3 {
	
		$weight : 2.5;
	
	} @else if $h == 4 {
	
		$weight : 2;
	
	} @else if $h == 5 {
		
		$weight : 1.5;
	}
	
	@return $weight * $font-size-m;
}

@mixin fs-master-container-width {

	@extend .grid-container, .grid-parent;
	
	width : 60%;
	max-width : 720px;
}

@mixin fs-flexbox ($prop) {

	@for $i from 1 through 3 {
		@include flexbox($prop, $version : $i);	
	}
}

@mixin fs-flex-column-xCenter ($justify-content : center) {

	@include fs-flexbox((
				display : flex,
				align-items : center,
				flex-direction : column,
				justify-content : $justify-content
			 ));
}

@mixin fs-position ($pos, $top, $right, $btm, $left) {
	position : $pos;
	@if $top != null { top : $top };
	@if $btm != null { bottom : $btm };
	@if $left != null { left : $left };
	@if $right != null { right : $right };
}

@mixin fs-pos-abs ($top, $right, $btm, $left) {
	@include fs-position(absolute, $top, $right, $btm, $left);
}

@mixin fs-grid ($perc) {
	@extend .grid-#{$perc}, .mobile-grid-#{$perc};
}
@mixin fs-grid-prarent ($perc) {
	@extend .grid-parent;
	@include fs-grid($perc);
}

@mixin fs-grid-100 {
	@include fs-grid-prarent(100);
}


html {
	font-size : 18px;
	
	color : $font-color;
	
	background : #303030;
	@include background(radial-gradient(circle, #5f5f5f, #303030));
	
	&, code, pre {
		font-family : $font-family;
	}
}

body {
	@include fs-flex-column-xCenter($justify-content : center);
	
	overflow-x : hidden;
}

h6 {
	font-size : fs-get-h-tag-font-size(6);
}

h5 {
	font-size : fs-get-h-tag-font-size(5);
}

h4 {
	font-size : fs-get-h-tag-font-size(4);
}

h3 {
	font-size : fs-get-h-tag-font-size(3);
}

h2 {
	font-size : fs-get-h-tag-font-size(2);
}

h1 {
	font-size : fs-get-h-tag-font-size(1);
}

// -- Web modules -- //

.ppt {
/*	== PPT module ==

	<article class="ppt">
		
		// .ppt-prevSlide = The previous slide
		// .ppt-nextSlide = The next slide
		// .ppt-currentSlide = the current slide being viewed
		<section class="ppt-slide [ppt-prevSlide | ppt-nextSlide | ppt-currentSlide]">
			
			<h3 class="ppt-slide-title"></h3>
			
			<p class="ppt-slide-content"></p>
			
			<aside class="ppt-slide-footer">
				<span class="ppt-slide-footer-count"></span>
			</aside>
			
		</section>
	
	</article>
*/
	
	@include fs-master-container-width;	
	@include fs-flex-column-xCenter;
	
	height : 640px;
	
	position : relative;
	
	&-slide {
		
		@include fs-grid-100;
		@include fs-flex-column-xCenter($justify-content : space-around);
		@include transition( (left, 1s, ease-out, 0s), (opacity, 1s, ease-out, 0s) );
		
		height : 640px;
		
		&-title {			
		}
		
		&-content {
			@include fs-grid-100;
			margin-top: -50px;
			font-size : 1.5rem;
		}
		
		&-footer {
		
			@include fs-grid-100;
			@include fs-flex-column-xCenter;
			@include fs-pos-abs(null, null, 0, 0);
			
			height : 3rem;
			
			&-count {
				font-size : 1rem
			}
		}
	}
	
	&-prevSlide {	
		@include fs-pos-abs(0, null, null, -50%);		
		opacity : 0;
	}
	
	&-nextSlide {	
		@include fs-pos-abs(0, null, null, 50%);		
		opacity : 0;
	}
	
	&-currentSlide {
		@include fs-pos-abs(0, null, null, 0);
		z-index : 99;
		opacity : 1;
	}
}

// !-- Web modules -- //

// -- Reusable object -- //

.lyt { // Layout object

	&-remark {
		font-size : 0.7rem;
		display : none;
		
		.showRemark & {
			display : block;
		}
	}
	
	&-centerContent {
		@include fs-flex-column-xCenter;
	}
	
	&-centerBlock {
		margin : 0 auto;
		display : block;
	}
	
	@for $i from 1 through 40 { // Create &-margin-???-1x/2x/3x...
	
		&-margin-top-#{$i}x {			
			margin-top : $i * $margin-base-unit;
		}
	
		&-margin-right-#{$i}x {			
			margin-right : $i * $margin-base-unit;
		}
	
		&-margin-bottom-#{$i}x {			
			margin-bottom : $i * $margin-base-unit;
		}
	
		&-margin-left-#{$i}x {			
			margin-left : $i * $margin-base-unit;
		}
	}
	
	@media (max-width: $media-mobile-max) {
		
		@for $i from 1 through 40 { // Create &-mobile-margin-???-1x/2x/3x...
		
			&-mobile-margin-top-#{$i}x {			
				margin-top : $i * $margin-base-unit;
			}
		
			&-mobile-margin-right-#{$i}x {			
				margin-right : $i * $margin-base-unit;
			}
		
			&-mobile-margin-bottom-#{$i}x {			
				margin-bottom : $i * $margin-base-unit;
			}
		
			&-mobile-margin-left-#{$i}x {			
				margin-left : $i * $margin-base-unit;
			}
		}
	}
}

.sty { // Styling object
	
	&-font-size-s {
		font-size : 0.9 * $font-size-m;
	}
	
	&-font-size-m {
		font-size : $font-size-m;
	}
	
	&-font-italic {
		font-style : italic;
	}
}

// !-- Reusable styles -- //